#!/usr/bin/env python
# Maintainer Dan Pilch <dan@ctrlengineering.com>
# Description: Upload music to Google Music Lazily
# -*- encoding: utf8 -*-

from concurrent.futures import ThreadPoolExecutor
import threading
from gmusicapi import Musicmanager
import argparse
import sys
import os

# Set encoding to utf8 to fix filename encodings
reload(sys)
sys.setdefaultencoding('utf8')

class GoogleMusicUpload(threading.Thread):
    def __init__(self, thread_pool):
        self.threads = []
        self.thread_pool = thread_pool
        self.wanted_filetypes = ('.mp3', '.flac')
        self.cwd = os.getcwd()
        self.client = Musicmanager()
        self.client.login()
        
    def thread_upload(self, files):

        with ThreadPoolExecutor(max_workers=self.thread_pool) as executor:
            for f in files:
                future = executor.submit(self.upload, f)

    def upload(self, f):
        print "Found: {0}".format(f)
        try:
            self.client.upload(str(f), transcode_quality="320k", enable_matching=True)

        except Exception as e:
            raise e

    def find_music(self, recurse):
        
        # Recursively look for files in subdirectories... Respect, walk \m/
        if recurse:
            print "recursing into directories to find music"
            found_files = []
            for root, dirs, files in os.walk(self.cwd):
                for f in files:
                    if f.endswith(self.wanted_filetypes):
                        found_files.append(os.path.join(root, f))

        else:
            # Just look in the current directory
            print "looking in the current directory for music"
            found_files = [each for each in os.listdir(self.cwd) if each.endswith(self.wanted_filetypes)]
        
        return found_files

    def authenticate(self):
        from gmusicapi import Mobileclient
        from getpass import getpass
        
        self.client.perform_oauth()

def main():
    parser = argparse.ArgumentParser(description="Upload music to Google Play Music")
    parser.add_argument('--authenticate', '-a', help="Perform OAuth request for Google auth", action="store_true", required=False, default=None)
    parser.add_argument('--recurse', '-r', help="Recursively look for music in all directories", action="store_true", required=False, default=None)
    parser.add_argument('--threads', '-t', help="How many threads to spawn concurrently", required=False, default=5, type=int)
    args = parser.parse_args()

    run = GoogleMusicUpload(thread_pool=args.threads)
    print "Starting GooglePlay Music Uploader"

    if args.authenticate:
        run.authenticate()
        return

    # Find music
    music = run.find_music(args.recurse)

    if len(music) < 1:
        print "No Files to upload"
        return

    if args.threads >= 1:
        run.thread_upload(music)
    else:
        run.upload(music)

    print "Finished"

if __name__ == "__main__":
    main()
